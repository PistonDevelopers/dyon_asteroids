fn load_assets() -> res {

    spaceship_material := load(material: "assets/spaceship.mtl")?
    spaceship_material_index := material(spaceship_material)?
    println("MATERIALS")
    print(link {
        "name: "spaceship_material"\n"
        "index: "spaceship_material_index"\n"
    })
    materials := materials()
    println(materials)

    println("\nOBJs")
    spaceship_obj := load(obj: "assets/spaceship.obj")?
    println(info(obj: spaceship_obj, short: true)?)
    objs := objs()
    println(objs)

    println("\nPREPARE")

    materials := ["metal", "glass"]
    for i {
        mat := prepare(obj: 0, material: materials[i])
        println(len(mat.vertices))
        println(len(mat.normals))
        println(len(mat.indices))

        vertex_buffer := create_vertex_buffer(size: len(mat.vertices))?
        fill_vertex_buffer(buffer: vertex_buffer, pos: mat.vertices, norm: mat.normals)
        index_buffer := create_index_buffer(size: len(mat.indices))?
        fill_index_buffer(buffer: index_buffer, data: mat.indices)
    }

    /* TEST triangle
    vb := create_vertex_buffer(size: 3)?
    fill_vertex_buffer(buffer: vb, pos: [
            (0, -0.5), (0, 0.5), (0.5, -0.5)
        ], norm: [(0, 0, 1); 3])
    ib := create_index_buffer(size: 3)?
    fill_index_buffer(buffer: ib, data: [0, 1, 2])
    */

    println(count_vertex_buffers())
    println(count_index_buffers())

    println("\nPROGRAMS")
    vshader := load_string(file: "assets/shaders/150_core.glslv")?
    fshader := load_string(file: "assets/shaders/150_core.glslf")?
    default := load_program(
        name: "default",
        vshader: vshader,
        fshader: fshader
    )?
    println(default)
    default_index := program(default)?
    println(default_index)

    println("\nMUSIC")
    music := load(music: "assets/music/space-of-silence.wav")?
    println(music)
    music_index := music(music)?
    play_forever(music: music_index)

    return ok("Assets loaded")
}

fn prepare__obj_material(obj: f64, material: str) -> Indices {} {
    indices := []
    vertices := []
    normals := []
    oc := object_count(obj: obj)
    for o oc {
        pos := []
        norm := []
        geometry := geometry(obj: obj, object: o)
        for g, k {
            if geometry[g].material_name == none() { continue }
            mat := unwrap(geometry[g].material_name)
            if mat != material {
                continue
            }
            for i := 0; i < len(geometry[g].shapes[k]); i += 3 {
                for j 3 {
                    push(mut pos, geometry[g].shapes[k][i+j][0])
                    push(mut norm, unwrap(geometry[g].shapes[k][i+j][2]))
                }
            }
        }
        vs := vertices(obj: obj, object: o)
        ns := normals(obj: obj, object: o)
        for i {
            // Flip z and y axis.
            p := vs[pos[i]]
            pos := (xzy vs[pos[i]],)
            norm := ns[norm[i]]
            added := any i {
                (vertices[i] == pos) && (normals[i] == norm)
            }
            if added {
                hit := why(added)
                push(mut indices, hit[0])
            } else {
                push(mut indices, len(vertices))
                push(mut vertices, pos)
                push(mut normals, norm)
            }
        }
    }
    return {vertices: clone(vertices), normals: clone(normals), indices: clone(indices)}
}

/*
fn prepare_geometry(geometry: {}) -> [Strip {}] {
    strips := []
    pos := []
    norm := []
    for k {
        for i := 0; i < len(geometry.shapes[k]); i += 3 {
            n := len(pos)
            if n > 0 {
                a := geometry.shapes[k][i][0]
                b := geometry.shapes[k][i+1][0]
                an := unwrap(geometry.shapes[k][i][2])
                bn := unwrap(geometry.shapes[k][i+1][2])
                // Both position and normal must differ.
                if (a == pos[n-3]) &&
                   (b == pos[n-1]) &&
                   (an == norm[n-3]) &&
                   (bn == norm[n-1]) {
                    push(mut pos, geometry.shapes[k][i+2][0])
                    push(mut norm, unwrap(geometry.shapes[k][i+2][2]))
                    continue
               } else {
                    push(mut strips, {pos: pos, norm: norm})
                    pos = []
                    norm = []
               }
            }
            for j 3 {
                push(mut pos, geometry.shapes[k][i+j][0])
                push(mut norm, unwrap(geometry.shapes[k][i+j][2]))
            }
        }
    }
    if len(pos) > 0 {
        push(mut strips, {pos: pos, norm: norm})
    }
    return clone(strips)
}
*/

fn all_quads(strips: [Strip {}]) -> bool {
    return all i { len(strips[i].pos) == 4 }
}

fn info__obj_short(obj: str, short: bool) -> res[link] {
    obj_index := obj(obj)?
    material_library := material_library(obj: obj_index)?
    objects := objects(obj: obj_index)
    return ok(link {
        "name: "obj"\n"
        "index: "obj_index"\n"
        "material_library: "material_library"\n"
        "objects: ["{
            l := link {}
            for i {
                l += "\n{name: "
                l += json_string(objects[i])
                l += ", "

                n := vertex_count(obj: obj_index, object: i)
                if short {
                    l += "vs: "
                    l += n
                    l += ", "
                }
                if !short {
                    l += "\nvertices: "
                    l += str(vertices(obj: obj_index, object: i))
                    l += ", "
                }

                n := tex_vertex_count(obj: obj_index, object: i)
                if short {
                    l += "uvs: "
                    l += n
                    l += ", "
                }
                if !short {
                    l += "\ntex_vertices: "
                    l += str(tex_vertices(obj: obj_index, object: i))
                    l += ", "
                }

                n := normal_count(obj: obj_index, object: i)
                if short {
                    l += "ns: "
                    l += n
                    l += ", "
                }
                if !short {
                    l += "\nnormals: "
                    l += str(normals(obj: obj_index, object: i))
                    l += ", "
                }

                n := geometry_count(obj: obj_index, object: i)
                if short {
                    l += "gs: "
                    l += n
                    l += ", "
                }
                if !short {
                    l += "\ngeometry: "
                    l += str(geometry(obj: obj_index, object: i))
                    l += ", "
                }

                l += "}, "
            }
            clone(l)
        }"]\n"
    })
}
