pi() = 3.141592653589793
tau() = 2 * pi()

fn clamp__pos_aa_bb(pos: vec4, aa: vec4, bb: vec4) -> {
    return vec4 i {
        s := s(pos, i)
        if s < s(aa, i) { s = s(aa, i) }
        if s > s(bb, i) { s = s(bb, i) }
        clone(s)
    }
}

identity() = [
    (1, 0, 0),
    (0, 1, 0)
]
multiply__mat_mat(a: [vec4], b: [vec4]) = [
    (
        x(a[0]) * s(b[0], 0) + y(a[0]) * s(b[1], 0),
        x(a[0]) * s(b[0], 1) + y(a[0]) * s(b[1], 1),
        x(a[0]) * s(b[0], 2) + y(a[0]) * s(b[1], 2) + z(a[0]),
    ),
    (
        x(a[1]) * s(b[0], 0) + y(a[1]) * s(b[1], 0),
        x(a[1]) * s(b[0], 1) + y(a[1]) * s(b[1], 1),
        x(a[1]) * s(b[0], 2) + y(a[1]) * s(b[1], 2) + z(a[1]),
    )
]
translate(x: f64, y: f64) =
    [
        (1, 0, x),
        (0, 1, y),
    ]
rotate(angle: f64) =
    [
        (cos(angle), -sin(angle), 0),
        (sin(angle), cos(angle), 0)
    ]
rotate__x_y_angle(x: f64, y: f64, angle: f64) =
    multiply(mat: multiply(mat: translate(x, y), mat: rotate(angle)),
             mat: translate(-x, -y))
/*
scale(s: f64) =
    [
        [clone(s), 0, 0, 0],
        [0, clone(s), 0, 0],
        [0, 0, clone(s), 0],
        [0, 0, 0, 1]
    ]
shear(x: f64, y: f64) = [
        [1, clone(x), 0, 0],
        [clone(y), 1, 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
orient(x: f64, y: f64) = {
    len := |(x, y)|
    if len == 0 { return identity() }
    c := x / len
    s := y / len
    [
        [clone(c), -s, 0, 0],
        [clone(s), clone(c), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
}
transform_mat_vec(mat: [[f64]], v: vec4) = vec4 i (vec4 j mat[i][j]) *. v
point(v: vec4) = (xyz v, 1)
*/

fn test() {
    a := translate(xy (1, 2))
    b := translate(xy (2, 1))
    c := multiply(mat: a, mat: b)
    println(c)
}
